//local Attractions page


import React, { useEffect, useState } from "react";
import CategorySection from "./CategorySection";

const CATEGORIES = [
  { key: "food-place", label: "Food Places" },
  { key: "hidden-spot", label: "Hidden Spots" },
  { key: "hospital", label: "Hospitals" },
  { key: "hotel", label: "Hotels" },
  { key: "restaurant", label: "Restaurants" },
  { key: "shopping", label: "Shopping" },
  { key: "tourist-attraction", label: "Tourist Attractions" },
];

const LocalAttractions = ({ cityId }) => {
  const [places, setPlaces] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchPlaces = async () => {
      try {
        const response = await fetch(`/api/places?cityId=${cityId}`);
        const data = await response.json();
        setPlaces(data);
      } catch (error) {
        console.error("Error fetching places:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchPlaces();
  }, [cityId]);

  // Group places by category
  const placesByCategory = CATEGORIES.reduce((acc, { key }) => {
    acc[key] = places.filter((p) => {
      const categoryKey = p.type ? p.type.toLowerCase().replace(/\s+/g, "-") : "";
      return categoryKey === key;
    });
    return acc;
  }, {});

  if (loading) {
    return <p className="text-center">Loading...</p>;
  }

  return (
    <section className="max-w-5xl mx-auto p-4 md:p-8">
      <h2 className="text-2xl font-bold mb-6 text-center">Local Attractions</h2>
      {CATEGORIES.map(({ key, label }) =>
        placesByCategory[key]?.length > 0 ? (
          <CategorySection
            key={key}
            category={label}
            places={placesByCategory[key]}
            cityId={cityId}
          />
        ) : (
          <p key={key} className="text-center text-gray-500">
            No {label.toLowerCase()} available.
          </p>
        )
      )}
    </section>
  );
};

export default LocalAttractions;





















import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { motion } from "framer-motion";
import axios from "axios";
import LoadingSpinner from "../components/LoadingSpinner";

const BASE_URL = import.meta.env.VITE_API_URL; // Your backend API URL

const PlaceDetails = () => {
  const { id } = useParams();
  const [place, setPlace] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchPlaceDetails = async () => {
      try {
        const response = await axios.get(`${BASE_URL}/places/${id}`);
        setPlace(response.data);
      } catch (err) {
        setError("Failed to fetch place details");
        console.error("Error fetching place details:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchPlaceDetails();
  }, [id]);

  if (loading) return <LoadingSpinner />;
  if (error) return <p className="text-center text-red-500">{error}</p>;

  return (
    <div className="max-w-5xl mx-auto p-6 md:p-10 mt-10 space-y-12">
      {/* Title & Main Image */}
      <div className="text-center">
        <h2 className="text-4xl font-bold text-gray-900">{place.name}</h2>
        <img
          src={place.images?.[3] || "/placeholder.jpg"}
          alt={place.name}
          className="w-full h-96 object-cover rounded-lg mt-6 shadow-lg"
        />
      </div>

      {/* Description & History */}
      <div className="space-y-4">
        <h2 className="text-3xl font-bold text-gray-900">Description and History</h2>
        <p className="text-lg text-gray-600 leading-relaxed">
          {place.description || "No description available."}
        </p>
      </div>

      {/* Location Section */}
      <div className="flex flex-col md:flex-row items-center gap-10">
        <div className="md:w-1/2 space-y-2">
          <h3 className="text-3xl font-bold text-gray-900">Location</h3>
          <p className="text-lg text-gray-600">{place.location?.address || "No location available."}</p>
          <p className="text-lg text-gray-600">{place.location?.coordinates || "No coordinates available."}</p>
        </div>
        <div className="md:w-1/2">
          <img
            className="w-full h-80 rounded-lg object-cover shadow-md"
            src={place.images?.[1] || "/placeholder.jpg"}
            alt="Location Image"
          />
        </div>
      </div>

      {/* Category Section */}
      <div className="flex justify-between items-center border-t pt-6">
        <h1 className="text-3xl font-bold text-gray-900">Category</h1>
        <p className="text-xl font-semibold text-gray-700">{place.type || "Not categorized"}</p>
      </div>

      {/* Famous For Section */}
      <div className="flex flex-col md:flex-row items-center gap-10">
        <div className="md:w-1/2">
          <img
            className="w-full h-80 rounded-lg object-cover shadow-md"
            src={place.images?.[0] || "/placeholder.jpg"}
            alt="Famous place"
          />
        </div>
        <div className="md:w-1/2 space-y-2">
          <h1 className="text-3xl font-bold text-gray-900">Famous for</h1>
          <p className="text-lg text-gray-600">
            {place.famous || "No specific details available."}
          </p>
        </div>
      </div>

      {/* Reviews Section */}
      <Reviews reviews={place.reviews} />
    </div>
  );
};

// Reviews Component
const Reviews = ({ reviews = [] }) => {
  const reviewsVariants = {
    hidden: { y: 10, opacity: 0 },
    visible: { y: 0, opacity: 1, transition: { duration: 0.6 } },
    exit: { opacity: 0 },
  };

  return (
    <section className="max-w-5xl mx-auto p-4 md:p-8">
      <motion.div key="reviews" variants={reviewsVariants} initial="hidden" animate="visible" exit="exit">
        <h2 className="text-2xl font-bold mb-4">Reviews</h2>
        {reviews.length > 0 ? (
          <div className="space-y-4">
            {reviews.map((review) => (
              <div key={review._id} className="border-b pb-2">
                <p className="text-gray-800">
                  <strong>{review.user?.name || "Anonymous"}:</strong> {review.comment}{" "}
                  <span className="text-sm text-gray-500">({review.rating}/5)</span>
                </p>
              </div>
            ))}
          </div>
        ) : (
          <p>No reviews available for this place.</p>
        )}
      </motion.div>
    </section>
  );
};

export default PlaceDetails;
